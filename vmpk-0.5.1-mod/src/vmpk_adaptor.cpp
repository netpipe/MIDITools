/*
 * This file was generated by qdbusxml2cpp version 0.7
 * Command line was: qdbusxml2cpp -m -a vmpk_adaptor -i vpiano.h -l VPiano /home/clayton/Desktop/vmpk-0.5.1/src/net.sourceforge.vmpk.xml
 *
 * qdbusxml2cpp is Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#include "vmpk_adaptor.h"
#include <QtCore/QMetaObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>

/*
 * Implementation of adaptor class VmpkAdaptor
 */

VmpkAdaptor::VmpkAdaptor(VPiano *parent)
    : QDBusAbstractAdaptor(parent)
{
    // constructor
    setAutoRelaySignals(true);
}

VmpkAdaptor::~VmpkAdaptor()
{
    // destructor
}

void VmpkAdaptor::chankeypress(int value)
{
    // handle method call net.sourceforge.vmpk.chankeypress
    parent()->chankeypress(value);
}

void VmpkAdaptor::channel(int value)
{
    // handle method call net.sourceforge.vmpk.channel
    parent()->channel(value);
}

void VmpkAdaptor::close()
{
    // handle method call net.sourceforge.vmpk.close
    parent()->close();
}

void VmpkAdaptor::connect_in(const QString &value)
{
    // handle method call net.sourceforge.vmpk.connect_in
    parent()->connect_in(value);
}

void VmpkAdaptor::connect_out(const QString &value)
{
    // handle method call net.sourceforge.vmpk.connect_out
    parent()->connect_out(value);
}

void VmpkAdaptor::connect_thru(bool value)
{
    // handle method call net.sourceforge.vmpk.connect_thru
    parent()->connect_thru(value);
}

void VmpkAdaptor::controlchange(int control, int value)
{
    // handle method call net.sourceforge.vmpk.controlchange
    parent()->controlchange(control, value);
}

void VmpkAdaptor::hide()
{
    // handle method call net.sourceforge.vmpk.hide
    parent()->hide();
}

void VmpkAdaptor::lower()
{
    // handle method call net.sourceforge.vmpk.lower
    parent()->lower();
}

void VmpkAdaptor::move(int x, int y)
{
    // handle method call net.sourceforge.vmpk.move
    parent()->move(x, y);
}

void VmpkAdaptor::noteoff(int note)
{
    // handle method call net.sourceforge.vmpk.noteoff
    parent()->noteoff(note);
}

void VmpkAdaptor::noteon(int note)
{
    // handle method call net.sourceforge.vmpk.noteon
    parent()->noteon(note);
}

void VmpkAdaptor::octave(int value)
{
    // handle method call net.sourceforge.vmpk.octave
    parent()->octave(value);
}

void VmpkAdaptor::panic()
{
    // handle method call net.sourceforge.vmpk.panic
    parent()->panic();
}

void VmpkAdaptor::pitchwheel(int value)
{
    // handle method call net.sourceforge.vmpk.pitchwheel
    parent()->pitchwheel(value);
}

void VmpkAdaptor::polykeypress(int note, int value)
{
    // handle method call net.sourceforge.vmpk.polykeypress
    parent()->polykeypress(note, value);
}

void VmpkAdaptor::programchange(int value)
{
    // handle method call net.sourceforge.vmpk.programchange
    parent()->programchange(value);
}

void VmpkAdaptor::programnamechange(const QString &value)
{
    // handle method call net.sourceforge.vmpk.programnamechange
    parent()->programnamechange(value);
}

void VmpkAdaptor::quit()
{
    // handle method call net.sourceforge.vmpk.quit
    parent()->quit();
}

void VmpkAdaptor::raise()
{
    // handle method call net.sourceforge.vmpk.raise
    parent()->raise();
}

void VmpkAdaptor::repaint()
{
    // handle method call net.sourceforge.vmpk.repaint
    parent()->repaint();
}

void VmpkAdaptor::reset_controllers()
{
    // handle method call net.sourceforge.vmpk.reset_controllers
    parent()->reset_controllers();
}

void VmpkAdaptor::resize(int width, int height)
{
    // handle method call net.sourceforge.vmpk.resize
    parent()->resize(width, height);
}

void VmpkAdaptor::setDisabled(bool disable)
{
    // handle method call net.sourceforge.vmpk.setDisabled
    parent()->setDisabled(disable);
}

void VmpkAdaptor::setEnabled(bool enable)
{
    // handle method call net.sourceforge.vmpk.setEnabled
    parent()->setEnabled(enable);
}

void VmpkAdaptor::setFocus()
{
    // handle method call net.sourceforge.vmpk.setFocus
    parent()->setFocus();
}

void VmpkAdaptor::setHidden(bool hidden)
{
    // handle method call net.sourceforge.vmpk.setHidden
    parent()->setHidden(hidden);
}

void VmpkAdaptor::setStyleSheet(const QString &styleSheet)
{
    // handle method call net.sourceforge.vmpk.setStyleSheet
    parent()->setStyleSheet(styleSheet);
}

void VmpkAdaptor::setVisible(bool visible)
{
    // handle method call net.sourceforge.vmpk.setVisible
    parent()->setVisible(visible);
}

void VmpkAdaptor::setWindowModified(bool modified)
{
    // handle method call net.sourceforge.vmpk.setWindowModified
    parent()->setWindowModified(modified);
}

void VmpkAdaptor::setWindowTitle(const QString &title)
{
    // handle method call net.sourceforge.vmpk.setWindowTitle
    parent()->setWindowTitle(title);
}

void VmpkAdaptor::show()
{
    // handle method call net.sourceforge.vmpk.show
    parent()->show();
}

void VmpkAdaptor::showFullScreen()
{
    // handle method call net.sourceforge.vmpk.showFullScreen
    parent()->showFullScreen();
}

void VmpkAdaptor::showMaximized()
{
    // handle method call net.sourceforge.vmpk.showMaximized
    parent()->showMaximized();
}

void VmpkAdaptor::showMinimized()
{
    // handle method call net.sourceforge.vmpk.showMinimized
    parent()->showMinimized();
}

void VmpkAdaptor::showNormal()
{
    // handle method call net.sourceforge.vmpk.showNormal
    parent()->showNormal();
}

void VmpkAdaptor::transpose(int value)
{
    // handle method call net.sourceforge.vmpk.transpose
    parent()->transpose(value);
}

void VmpkAdaptor::update()
{
    // handle method call net.sourceforge.vmpk.update
    parent()->update();
}

void VmpkAdaptor::velocity(int value)
{
    // handle method call net.sourceforge.vmpk.velocity
    parent()->velocity(value);
}


#include "vmpk_adaptor.moc"
